name: Publish to PyPI

on:
  release:
    types: [created]

jobs:
  bump-version:
    name: Bump version in pyproject.toml
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: main
        fetch-depth: 0
    
    - name: Update version in pyproject.toml
      run: |
        VERSION=$(echo $GITHUB_REF | sed -e 's,.*/\(.*\),\1,' -e 's/^v//')
        echo "Setting version to: $VERSION"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        sed -i "s/^version = .*/version = \"$VERSION\"/" pyproject.toml
        
    - name: Create Pull Request
      id: cpr
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "Bump version to ${{ env.VERSION }}"
        title: "Bump version to ${{ env.VERSION }}"
        body: |
          Automated version bump triggered by release ${{ github.ref_name }}
        branch: "version-bump/${{ env.VERSION }}"
        base: main
        delete-branch: true
        
    - name: Enable and wait for PR merge
      if: steps.cpr.outputs.pull-request-number
      run: |
        PR_NUMBER="${{ steps.cpr.outputs.pull-request-number }}"
        gh pr merge $PR_NUMBER --auto --merge
        
        # Wait for PR to be merged
        while true; do
          STATUS=$(gh pr view $PR_NUMBER --json state -q .state)
          if [ "$STATUS" = "MERGED" ]; then
            echo "PR merged successfully"
            break
          elif [ "$STATUS" = "CLOSED" ]; then
            echo "PR was closed without merging"
            exit 1
          fi
          echo "Waiting for PR to be merged..."
          sleep 10
        done
        
        # Checkout the updated main branch
        git pull origin main
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-publish:
    needs: bump-version
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/github-pr-watcher
    
    permissions:
      contents: write
      id-token: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: main
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        
    - name: Build package
      run: poetry build
      
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: dist/
        verbose: true
        
    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v3.0.0
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl
          
    - name: Upload to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: >-
        gh release upload
        '${{ github.ref_name }}' dist/**
        --repo '${{ github.repository }}'